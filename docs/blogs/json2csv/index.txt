1:HL["/next/static/css/4a773a1932d71ae5.css","style",{"crossOrigin":""}]
0:["ckqW1xIrAy8h5OIbIkw3a",[[["",{"children":["blogs",{"children":[["slug","json2csv","c"],{"children":["__PAGE__?{\"slug\":[\"json2csv\"]}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/next/static/css/4a773a1932d71ae5.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2704,["326","static/chunks/326-32780eebf78208b8.js","58","static/chunks/58-0cb3e01cc2d21a08.js","185","static/chunks/app/layout-4089e0d2eac29418.js"],""]
5:I[6954,[],""]
6:I[7264,[],""]
2:[null,["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blogs","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blogs","children",["slug","json2csv","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L7","$L8",null],"segment":"__PAGE__?{\"slug\":[\"json2csv\"]}"},"styles":[]}],"segment":["slug","json2csv","c"]},"styles":[]}],"segment":"blogs"},"styles":[]}],"params":{}}],null]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"convert json to csv in python - Step-by-Step Guide"}],["$","meta","2",{"name":"description","content":"how to convert json to csv in python - Step-by-Step Guide"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","4",{"property":"og:title","content":"convert json to csv in python - Step-by-Step Guide"}],["$","meta","5",{"property":"og:description","content":"how to convert json to csv in python - Step-by-Step Guide"}],["$","meta","6",{"property":"og:type","content":"article"}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"convert json to csv in python - Step-by-Step Guide"}],["$","meta","9",{"name":"twitter:description","content":"how to convert json to csv in python - Step-by-Step Guide"}]]
9:T523,import json


def flatten_json(json_data, separator='_'):
    result = []

    def flatten(item, parent_key='', sep=separator):
        if isinstance(item, dict):
            for key, value in item.items():
                new_key = f"{parent_key}{sep}{key}" if parent_key else key
                flatten(value, new_key, sep)
        else:
            result.append({parent_key: item})

    flatten(json_data)
    return result


def convert_json_to_csv(json_data, csv_file):
    flattened_data = flatten_json(json_data)

    with open(csv_file, 'w', newline='') as csvfile:
        # Write header
        if flattened_data:
            header = ','.join(flattened_data[0].keys())
            csvfile.write(f"{header}\n")

            # Write data
            for entry in flattened_data:
                row = ','.join(map(str, entry.values()))
                csvfile.write(f"{row}\n")


# Sample JSON data
json_data = [
    {"Name": "John", "Age": 30, "Address": {"City": "New York", "Zip": 10001}},
    {"Name": "Alice", "Age": 25, "Address": {"City": "San Francisco", "Zip": 94105}},
]

# Specify CSV file name
csv_file = 'output.csv'

# Convert JSON to CSV
convert_json_to_csv(json_data, csv_file)

print(f'Conversion successful. CSV file saved as {csv_file}')

8:["$","section",null,{"className":"pb-[120px] pt-[150px]","children":["$","div",null,{"className":"container","children":["$","div",null,{"className":"-mx-4 flex flex-wrap justify-center","children":["$","div",null,{"className":"w-full px-4 lg:w-8/12","children":["$","article",null,{"children":[["$","h1",null,{"className":"mb-8 text-3xl font-bold leading-tight text-black dark:text-white sm:text-4xl sm:leading-tight","children":"convert json to csv in python - Step-by-Step Guide"}],["$","div",null,{"children":[[["$","p",null,{"children":["$","em",null,{"children":["$","strong",null,{"children":"we have summarized several common ways for you: example using Python's built-in modules, example using Pandas, and showing the code through pure python. In addition, we've provided a series of solutions to common problems to help you navigate the world of Python more easily."}]}]}],"\n",["$","h2",null,{"children":"what is a csv file"}],"\n",["$","p",null,{"children":"A CSV (Comma-Separated Values) file is a plain text file that stores tabular data (numbers and text) in a plain, human-readable format. Each line of the file represents a row of the table, and the values within each row are separated by commas or other delimiters."}],"\n",["$","p",null,{"children":"Key characteristics of CSV files include:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Plain Text Format: CSV files are plain text files, meaning they can be opened and edited using any text editor."}],"\n",["$","li",null,{"children":"Tabular Structure: Data is organized in rows and columns, forming a tabular structure similar to a spreadsheet or a database table."}],"\n",["$","li",null,{"children":"Comma-Separated Values: While the term \"Comma-Separated Values\" suggests the use of commas as delimiters, other characters like semicolons, tabs, or spaces can also be used. The choice of delimiter depends on the specific requirements and conventions."}],"\n",["$","li",null,{"children":"No Data Types: CSV files do not include information about data types. All values are treated as text, and interpretation of data types is left to the software reading the file."}],"\n"]}],"\n",["$","p",null,{"children":"Here is an example of a simple CSV file:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-text","children":"Name,Age,City\r\nJohn,30,New York\r\nAlice,25,San Francisco\r\nBob,35,Los Angeles\n"}]}],"\n",["$","p",null,{"children":"In this example, each line represents a row, and the values within each row are separated by commas. The first row typically contains column headers (Name, Age, City) to label the data in each column."}],"\n",["$","h2",null,{"children":"Use python built-in modules, no need to install additional python packages"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-python","children":"import csv\r\nimport json\r\n\r\n# Sample JSON data\r\njson_data = '[{\"Name\": \"John\", \"Age\": 30, \"City\": \"New York\"}, {\"Name\": \"Alice\", \"Age\": 25, \"City\": \"San Francisco\"}]'\r\n\r\n# Load JSON data\r\ndata = json.loads(json_data)\r\n\r\n# Specify CSV file name\r\ncsv_file = 'output.csv'\r\n\r\n# Open CSV file in write mode\r\nwith open(csv_file, 'w', newline='') as csvfile:\r\n    # Create CSV writer\r\n    csv_writer = csv.writer(csvfile)\r\n\r\n    # Write header\r\n    csv_writer.writerow(data[0].keys())\r\n\r\n    # Write data\r\n    for row in data:\r\n        csv_writer.writerow(row.values())\r\n\r\nprint(f'Conversion successful. CSV file saved as {csv_file}')\n"}]}],"\n",["$","h2",null,{"children":"How to Convert JSON to CSV using Pandas"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-python","children":"import pandas as pd\r\nimport json\r\n\r\n# Sample JSON data\r\njson_data = [\r\n    {\"Name\": \"John\", \"Age\": 30, \"Address\": {\"City\": \"New York\", \"Zip\": 10001}},\r\n    {\"Name\": \"Alice\", \"Age\": 25, \"Address\": {\"City\": \"San Francisco\", \"Zip\": 94105}},\r\n]\r\n\r\n# Convert JSON to DataFrame\r\ndf = pd.json_normalize(json_data)\r\n\r\n# Specify CSV file name\r\ncsv_file = 'output.csv'\r\n\r\n# Save DataFrame to CSV\r\ndf.to_csv(csv_file, index=False)\r\n\r\nprint(f'Conversion successful. CSV file saved as {csv_file}')\n"}]}],"\n",["$","h2",null,{"children":"Pure Python implementation without any dependencies on any libraries"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-python","children":"$9"}]}],"\n",["$","h2",null,{"children":"Common Problem"}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Problem: Chinese or special characters appear garbled after the CSV file is opened."}]}],["$","br",null,{}],"\n",["$","strong",null,{"children":"Solution"}],": Make sure you use the correct encoding when opening the file, such as utf-8. You can use the encoding='utf-8' parameter in the open function.\r\nFile path problem"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-python","children":"df.to_csv('data.csv',index=False,encoding='utf_8_sig')\n"}]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Note"}],": When utf-8 is invalid, you can try utf_8_sig"]}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":["$","strong",null,{"children":["$","em",null,{"children":"Problem: The file path contains special characters or the file does not exist."}]}]}],"\n",["$","p",null,{"children":"Solution: Make sure the file path is correct, you can use an absolute path or a relative path. Be careful to escape special characters.\r\nCSV module reading and writing problems:"}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Problem: An error occurred while reading and writing CSV files."}]}],["$","br",null,{}],"\n","Solution: Check the code that uses the csv module to make sure you are using the csv.reader or csv.writer object correctly. Note that the file is opened and closed correctly.\r\nCSV end of line issues:"]}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Problem: Different operating systems use different line endings, which may cause problems when reading CSV files."}]}],["$","br",null,{}],"\n","Solution: Use the newline='' parameter when opening the file, which helps deal with different line endings.\r\nMissing fields or blank rows issues:"]}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Problem: There are missing fields or empty lines in the CSV file."}]}],["$","br",null,{}],"\n","Solution: When processing CSV data, you can check for and handle missing fields. For empty lines, filtering can be done while reading.\r\nCSV header processing:"]}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Issue: Whether the CSV file contains headers (column names) may affect data processing."}]}],["$","br",null,{}],"\n","Workaround: When reading, you can use the next method of csv.reader to skip the header rows, or use csv.DictReader to access the data by column name.\r\npandas handles large files:"]}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Issue: Using pandas to process large CSV files may cause memory issues."}]}],["$","br",null,{}],"\n","Workaround: For large files, you can use the chunksize parameter to break the file into smaller chunks, or use other memory-friendly methods.\r\nCSV writing timestamp format issue:"]}],"\n",["$","br",null,{}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":["$","em",null,{"children":"Issue: When writing a CSV containing timestamps, the timestamp format may not be as expected."}]}],["$","br",null,{}],"\n","Workaround: Specify the correct timestamp format when writing, or perform proper timestamp parsing when reading."]}],"\n",["$","br",null,{}]],["$","div",null,{"className":"items-center justify-between sm:flex","children":[["$","div",null,{"className":"mb-5","children":[["$","h4",null,{"className":"mb-3 text-sm font-medium text-body-color","children":"Popular Tags :"}],["$","div",null,{"className":"flex items-center","children":[["$","a",null,{"href":"#0","className":"bg-gray-light mb-3 mr-3 inline-flex items-center justify-center rounded-sm px-4 py-2 text-sm text-black duration-300 hover:bg-primary hover:text-white dark:bg-[#2C303B] dark:text-white dark:hover:bg-primary","children":"csv"}],["$","a",null,{"href":"#0","className":"bg-gray-light mb-3 mr-3 inline-flex items-center justify-center rounded-sm px-4 py-2 text-sm text-black duration-300 hover:bg-primary hover:text-white dark:bg-[#2C303B] dark:text-white dark:hover:bg-primary","children":"json\r"}]]}]]}],["$","div",null,{"className":"mb-5","children":[["$","h5",null,{"className":"mb-3 text-sm font-medium text-body-color sm:text-right","children":"Share this post :"}],["$","div",null,{"className":"flex items-center sm:justify-end","children":[["$","a",null,{"href":"#0","aria-label":"social-share","className":"bg-gray-light dark:bg-gray-dark mb-3 inline-flex h-9 w-9 items-center justify-center rounded-sm text-body-color duration-300 hover:bg-primary hover:text-white dark:hover:bg-primary sm:ml-3","children":["$","svg",null,{"width":"16","height":"16","viewBox":"0 0 16 16","className":"fill-current","children":["$","path",null,{"d":"M14.3442 0H1.12455C0.499798 0 0 0.497491 0 1.11936V14.3029C0 14.8999 0.499798 15.4222 1.12455 15.4222H14.2942C14.919 15.4222 15.4188 14.9247 15.4188 14.3029V1.09448C15.4688 0.497491 14.969 0 14.3442 0ZM4.57316 13.1089H2.29907V5.7709H4.57316V13.1089ZM3.42362 4.75104C2.67392 4.75104 2.09915 4.15405 2.09915 3.43269C2.09915 2.71133 2.69891 2.11434 3.42362 2.11434C4.14833 2.11434 4.74809 2.71133 4.74809 3.43269C4.74809 4.15405 4.19831 4.75104 3.42362 4.75104ZM13.1947 13.1089H10.9206V9.55183C10.9206 8.7061 10.8956 7.58674 9.72108 7.58674C8.52156 7.58674 8.34663 8.53198 8.34663 9.47721V13.1089H6.07255V5.7709H8.29665V6.79076H8.32164C8.64651 6.19377 9.37122 5.59678 10.4958 5.59678C12.8198 5.59678 13.2447 7.08925 13.2447 9.12897V13.1089H13.1947Z"}]}]}],["$","a",null,{"href":"#0","aria-label":"social-share","className":"bg-gray-light dark:bg-gray-dark mb-3 ml-3 inline-flex h-9 w-9 items-center justify-center rounded-sm text-body-color duration-300 hover:bg-primary hover:text-white dark:hover:bg-primary","children":["$","svg",null,{"width":"18","height":"14","viewBox":"0 0 18 14","className":"fill-current","children":["$","path",null,{"d":"M15.5524 2.26027L16.625 1.0274C16.9355 0.693493 17.0202 0.436644 17.0484 0.308219C16.2016 0.770548 15.4113 0.924658 14.9032 0.924658H14.7056L14.5927 0.821918C13.9153 0.282534 13.0685 0 12.1653 0C10.1895 0 8.6371 1.48973 8.6371 3.21062C8.6371 3.31336 8.6371 3.46747 8.66532 3.57021L8.75 4.0839L8.15726 4.05822C4.54435 3.95548 1.58065 1.13014 1.10081 0.642123C0.310484 1.92637 0.762097 3.15925 1.24194 3.92979L2.20161 5.36815L0.677419 4.5976C0.705645 5.67637 1.15726 6.52397 2.03226 7.14041L2.79435 7.65411L2.03226 7.93665C2.5121 9.24658 3.58468 9.78596 4.375 9.99144L5.41935 10.2483L4.43145 10.8647C2.85081 11.8921 0.875 11.8151 0 11.738C1.77823 12.8682 3.89516 13.125 5.3629 13.125C6.46371 13.125 7.28226 13.0223 7.47984 12.9452C15.3831 11.25 15.75 4.82877 15.75 3.54452V3.36473L15.9194 3.26199C16.879 2.44007 17.2742 2.00342 17.5 1.74658C17.4153 1.77226 17.3024 1.82363 17.1895 1.84932L15.5524 2.26027Z"}]}]}],["$","a",null,{"href":"#0","aria-label":"social-share","className":"bg-gray-light dark:bg-gray-dark mb-3 ml-3 inline-flex h-9 w-9 items-center justify-center rounded-sm text-body-color duration-300 hover:bg-primary hover:text-white dark:hover:bg-primary","children":["$","svg",null,{"width":"9","height":"18","viewBox":"0 0 9 18","className":"fill-current","children":["$","path",null,{"d":"M8.13643 7H6.78036H6.29605V6.43548V4.68548V4.12097H6.78036H7.79741C8.06378 4.12097 8.28172 3.89516 8.28172 3.55645V0.564516C8.28172 0.254032 8.088 0 7.79741 0H6.02968C4.11665 0 2.78479 1.58064 2.78479 3.92339V6.37903V6.94355H2.30048H0.65382C0.314802 6.94355 0 7.25403 0 7.70564V9.7379C0 10.1331 0.266371 10.5 0.65382 10.5H2.25205H2.73636V11.0645V16.7379C2.73636 17.1331 3.00273 17.5 3.39018 17.5H5.66644C5.81174 17.5 5.93281 17.4153 6.02968 17.3024C6.12654 17.1895 6.19919 16.9919 6.19919 16.8226V11.0927V10.5282H6.70771H7.79741C8.11222 10.5282 8.35437 10.3024 8.4028 9.96371V9.93548V9.90726L8.74182 7.95968C8.76604 7.7621 8.74182 7.53629 8.59653 7.31048C8.54809 7.16935 8.33016 7.02823 8.13643 7Z"}]}]}]]}]]}]]}]]}]]}]}]}]}]}]
7:null
